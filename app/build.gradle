//声明是Android程序
// com.android.application 表示这是一个应用程序模块，可直接运行
// com.android.library 表示这是一个库模块，是依附别的应用程序运行
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'org.greenrobot.greendao'
android {
    // 程序在编译的时候会检查lint，有任何错误提示会停止build，我们可以关闭这个开关
    // lintOptions {
    //     // 即使报错也不会停止打包
    //     abortOnError false
    //     // 打包release版本的时候是否进行检测
    //     checkReleaseBuilds false
    // }
    //关闭Android Studio的PNG合法性检查
    //aaptOptions.cruncherEnabled = false
    //aaptOptions.useNewCruncher = false
    compileSdkVersion 29 //编译sdk的版本，也就是api level,列如 API-19,API-20等
    buildToolsVersion "29.0.3"// build tools的版本，其中包括了打包工具aapt,dx等，这个工具目录位于sdk目录/build-tools/下
    defaultConfig {
        applicationId "com.example.myapplication"//应用程序的包名
        minSdkVersion 22//最小sdk版本，如果设备小于这个版本或者大于maxSdkVersion将无法安装
        targetSdkVersion 29 //目标sdk版本，充分测试过的版本（建议版本）
        versionCode 1//版本号，第一版是1，之后每更新一次加1
        versionName "1.0"//版本名，显示给用户看到的版本号
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        flavorDimensions "versionCode"
        //        ndk {
        //            moduleName "testwifisafe"                   // 设置库(so)文件名称
        //            ldLibs "log", "z", "m", "jnigraphics", "android"
        //            // 引入库，比如要用到的__android_log_print
        //            abiFilters "armeabi", "x86", "armeabi-v7a"      // "x86"  显示指定支持的ABIs
        //            cFlags "-std=c++11 -fexceptions"                // C++11
        //            stl "gnustl_static"
        //        }
        // 默认的一些文件路径的配置
        //        sourceSets {
        //            main {
        //                manifest.srcFile 'AndroidManifest.xml' // 指定清单文件
        //                res.srcDirs = ['res'] // 指定res资源目录
        //                assets.srcDirs = ['assets']    // asset资源目录
        //                jni.srcDirs 'src/main/jni'     // jni代码目录
        //                jniLibs.srcDir 'src/main/jniLibs' // jni库目录
        //                java.srcDirs = ['src'] // 指定java源代码目录
        //                resources.srcDirs = ['src'] // 指定resource目录
        //                aidl.srcDirs = ['src'] // 指定aidl目录
        //                renderscript.srcDirs = ['src'] // 指定source目录
        //            }
        //            debug.setRoot('build-types/debug') // 指定debug模式的路径
        //            release.setRoot('build-types/release') // 指定release模式的路径
        //        }

    }
    //实现多渠道打包
    // 在这里你可以设置你的产品发布的一些东西，
    // 比如你现在一共软件需要发布到不同渠道，
    // 且不同渠道中的包名不同，那么可以在此进行配置；
    // 甚至可以设置不同的 AndroidManifest.xml 文件。
    productFlavors {
        baidu {

        }
        xiaomi {

        }
        qihu360 {

        }
        yingyongbao {

        }
        huawei {

        }
    }
    //这个标识将productFlavors中的名字赋值给UMENG_CHANNEL_VALUE也就是xiaomi{}会赋值xiaomi给UMENG_CHANNEL_VALUE；
    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL: name]
    }
    defaultConfig {
        manifestPlaceholders = [channel: name]
    }
    //封装此项目的所有构建类型配置
    buildTypes {
        release {
            minifyEnabled false //是否对代码进行混淆true表示混淆
            //zipAlignEnabled true  // 是否支持zip
            //shrinkResources true  // 移除无用的resource文件
            //proguard-android.text指所有项目通用的混淆规则,proguard-rules.pro当前项目特有的混淆规则
            //release的Proguard默认为Module下的proguard-rules.pro文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //   debuggable false  //是否支持调试
            //
            //   ndk的一些配置
            //   ndk {
            //       // cFlags "-std=c++11 -fexceptions -O3 -D__RELEASE__" // C++11
            //       // platformVersion = "19"
            //       moduleName "hebbewifisafe" // 设置库(so)文件名称
            //       ldLibs "log", "z", "m", "jnigraphics", "android"
            //       // 引入库，比如要用到的__android_log_print
            //       abiFilters "armeabi", "x86", "armeabi-v7a"// "x86"
            //       cFlags "-std=c++11 -fexceptions" // C++11
            //       stl "gnustl_static"
            //   }
            // 采用动态替换字符串的方式生成不同的 release.apk （3.0之后版本的修改方式）
            //applicationVariants.all { variant ->
            //    variant.outputs.all { output ->
            //        if (!variant.buildType.isDebuggable()) {
            //            // 获取签名的名字 variant.signingConfig.name
            //            // 要被替换的源字符串
            //            def sourceFile = "app-release";
            //            // 替换的字符串
            //            def replaceFile = "Demo-V${variant.versionName}.${releaseTime()}"
            //            outputFileName = output.outputFile.name.replace(sourceFile, replaceFile)
            //        }
            //    }
            //}
            //jniDebuggable false  // 关闭jni调试
        }

        //  debug {
        //      minifyEnabled false
        //      zipAlignEnabled true
        //      shrinkResources true // 移除无用的resource文件
        //      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        //      debuggable true
        //      //          jniDebuggable true
        //      ndk {
        //          cFlags "-std=c++11 -fexceptions -g -D __DEBUG__" // C++11
        //      }
        //      jniDebuggable true

        /*
        debuggable 该构建类型是否生成一个可调式的apk
        minifyEnabled 是否可以移出无用的java代码，默认为false
        multiDexEnabled 是否可以分包
        */
        //指定release APK名称
        android.applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = "dj" + "_v" + defaultConfig.versionName + "_" + defaultConfig.versionCode + "_" +
                        new Date().format("yyyy-MM-dd") + "_" + buildType.name + ".apk"
            }

        }

    }
    compileOptions {
        //进行java的版本设置 以便应对版本的一些新特性
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "driver_${variant.productFlavors[0].name}_v${variant.versionName}.apk"
        }
    }
    greendao {
        // 指定数据库schema版本号，迁移等操作会用到
        schemaVersion 1
        // 设置生成数据库文件的目录，默认是在build中，可以将生成的文件放到我们的java目录中
        targetGenDir 'src/main/java'
        // 设置生成的数据库相关文件的包名，默认为entity所在的包名
        daoPackage 'com.example.greendao.gen'
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    //retrofit2
    implementation 'com.squareup.retrofit2:retrofit:2.6.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.6'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'
    //ConverterFactory的String依赖包
    implementation 'com.squareup.retrofit2:converter-scalars:2.3.0'
    //ConverterFactory的Gson依赖包
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    //bindView
    implementation 'com.jakewharton:butterknife:10.0.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.0.0'
    //recycle
    //noinspection GradleCompatible
    implementation 'com.android.support:recyclerview-v7:26.0.1'
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.46'
    //butterknife
    implementation 'com.jakewharton:butterknife:10.0.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.0.0'
    implementation "androidx.core:core-ktx:+"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //banner
    implementation 'com.to.aboomy:banner:3.0.6'  //最新版本
    implementation 'com.to.aboomy:banner:3.0.6-x' //androidx版本
    //glide
    implementation 'com.github.bumptech.glide:glide:4.5.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.5.0'

    implementation 'com.google.android.material:material:1.0.0'

    implementation 'org.xutils:xutils:3.5.0'
    implementation 'com.androidkun:XTabLayout:1.1.4'
    //greendao
    implementation 'org.greenrobot:greendao:3.2.2'

    //fastJson解析json
    implementation 'com.alibaba:fastjson:1.1.60.android'
}
//使用maven仓库，android有两个标准的library文件服务器，一个jcenter一个maven,两者毫无关系
//jcenter有的maven可能没有，反之亦然
//如果要使用jcenter的话就把mavenCentral()替换成jcenter()
repositories {
    mavenCentral()
}
